1.学习目标。
    1.1 为了装逼！
    1.2 为了让代码看起来更好看，更舒服，用最短的代码写出功能！
    1.3 学会怎么使用lambda

2.学习程度
    2.1 在项目当中重构代码
    2.2 能够熟练的使用出基本的方法

3.学习方法
    3.1 每次学习35分钟，休息
    3.2 学习后复盘知识


使用lambda可以使代码变得简洁紧凑

Lambda 可以把函数当做一个参数放入方法中 （函数当参数放入方法中）
什么是函数式接口：接口中有一个抽象方法的借口，叫函数式接口 或者是被@FunctionalInterface修饰的接口（接口内部只能有一个抽象方法)

Lambda 的左边是参数，对应接口中抽象方法的参数列表
Lambda 的右边是执行功能，也就是你传的参数，做逻辑处理，对抽象方法的实现


Lambda基本语法
1.不带参数            ()-> sout("");
2.带参数，没有返回值   (x) -> sout(x)
                      x  -> sout(x)
                      Sout::print
3.带参数, 有多行语句，有返回值 (x,y)-> {
                                        sout....
                                        return Integer.compare(x,y);
                                    };
4.带参数，单行语句，有返回值   (x,y) -> Integer.compare(x,y); || (x,y) -> Integer::compare;


使用Lambda的方式
    1.必须是函数式接口，接口内只有一个方法
    2.必须有一个方法引用了接口
    3.有1和2的两个前提下，才可以使用Lambda


四大函数

  消费接口
    Consumer<T>
        void accept(T);

  供给接口
    Supplier<T>
        T get();

  函数型接口
  T:传入的参数 R:返回的参数，对传入的参数做逻辑处理，返回R;
    Function<T,R>
        R apply(T t);

  断言型接口  判断型接口
    Predicate<T>
        boolean test(T t);


字符串排序：Str.compareTo(str)
基本数据类型：Integer.compare(o1,o2),包装器类型都有.compare(o1,o2)

